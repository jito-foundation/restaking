/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { JITO_RESTAKING_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_NCN_DISCRIMINATOR = 1;

export function getInitializeNcnDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_NCN_DISCRIMINATOR);
}

export type InitializeNcnInstruction<
  TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountBase extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountNcn extends string ? WritableAccount<TAccountNcn> : TAccountNcn,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountBase extends string
        ? ReadonlySignerAccount<TAccountBase> & IAccountSignerMeta<TAccountBase>
        : TAccountBase,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeNcnInstructionData = { discriminator: number };

export type InitializeNcnInstructionDataArgs = {};

export function getInitializeNcnInstructionDataEncoder(): Encoder<InitializeNcnInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: INITIALIZE_NCN_DISCRIMINATOR })
  );
}

export function getInitializeNcnInstructionDataDecoder(): Decoder<InitializeNcnInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getInitializeNcnInstructionDataCodec(): Codec<
  InitializeNcnInstructionDataArgs,
  InitializeNcnInstructionData
> {
  return combineCodec(
    getInitializeNcnInstructionDataEncoder(),
    getInitializeNcnInstructionDataDecoder()
  );
}

export type InitializeNcnInput<
  TAccountConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountAdmin extends string = string,
  TAccountBase extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  ncn: Address<TAccountNcn>;
  admin: TransactionSigner<TAccountAdmin>;
  base: TransactionSigner<TAccountBase>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeNcnInstruction<
  TAccountConfig extends string,
  TAccountNcn extends string,
  TAccountAdmin extends string,
  TAccountBase extends string,
  TAccountSystemProgram extends string,
>(
  input: InitializeNcnInput<
    TAccountConfig,
    TAccountNcn,
    TAccountAdmin,
    TAccountBase,
    TAccountSystemProgram
  >
): InitializeNcnInstruction<
  typeof JITO_RESTAKING_PROGRAM_ADDRESS,
  TAccountConfig,
  TAccountNcn,
  TAccountAdmin,
  TAccountBase,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = JITO_RESTAKING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    ncn: { value: input.ncn ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
    base: { value: input.base ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeNcnInstructionDataEncoder().encode({}),
  } as InitializeNcnInstruction<
    typeof JITO_RESTAKING_PROGRAM_ADDRESS,
    TAccountConfig,
    TAccountNcn,
    TAccountAdmin,
    TAccountBase,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeNcnInstruction<
  TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    ncn: TAccountMetas[1];
    admin: TAccountMetas[2];
    base: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializeNcnInstructionData;
};

export function parseInitializeNcnInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeNcnInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      ncn: getNextAccount(),
      admin: getNextAccount(),
      base: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeNcnInstructionDataDecoder().decode(instruction.data),
  };
}
