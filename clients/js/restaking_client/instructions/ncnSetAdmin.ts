/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_RESTAKING_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const NCN_SET_ADMIN_DISCRIMINATOR = 17;

export function getNcnSetAdminDiscriminatorBytes() {
  return getU8Encoder().encode(NCN_SET_ADMIN_DISCRIMINATOR);
}

export type NcnSetAdminInstruction<
  TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountOldAdmin extends string | IAccountMeta<string> = string,
  TAccountNewAdmin extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountNcn extends string ? WritableAccount<TAccountNcn> : TAccountNcn,
      TAccountOldAdmin extends string
        ? ReadonlySignerAccount<TAccountOldAdmin> &
            IAccountSignerMeta<TAccountOldAdmin>
        : TAccountOldAdmin,
      TAccountNewAdmin extends string
        ? ReadonlySignerAccount<TAccountNewAdmin> &
            IAccountSignerMeta<TAccountNewAdmin>
        : TAccountNewAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type NcnSetAdminInstructionData = { discriminator: number };

export type NcnSetAdminInstructionDataArgs = {};

export function getNcnSetAdminInstructionDataEncoder(): Encoder<NcnSetAdminInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: NCN_SET_ADMIN_DISCRIMINATOR })
  );
}

export function getNcnSetAdminInstructionDataDecoder(): Decoder<NcnSetAdminInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getNcnSetAdminInstructionDataCodec(): Codec<
  NcnSetAdminInstructionDataArgs,
  NcnSetAdminInstructionData
> {
  return combineCodec(
    getNcnSetAdminInstructionDataEncoder(),
    getNcnSetAdminInstructionDataDecoder()
  );
}

export type NcnSetAdminInput<
  TAccountNcn extends string = string,
  TAccountOldAdmin extends string = string,
  TAccountNewAdmin extends string = string,
> = {
  ncn: Address<TAccountNcn>;
  oldAdmin: TransactionSigner<TAccountOldAdmin>;
  newAdmin: TransactionSigner<TAccountNewAdmin>;
};

export function getNcnSetAdminInstruction<
  TAccountNcn extends string,
  TAccountOldAdmin extends string,
  TAccountNewAdmin extends string,
>(
  input: NcnSetAdminInput<TAccountNcn, TAccountOldAdmin, TAccountNewAdmin>
): NcnSetAdminInstruction<
  typeof JITO_RESTAKING_PROGRAM_ADDRESS,
  TAccountNcn,
  TAccountOldAdmin,
  TAccountNewAdmin
> {
  // Program address.
  const programAddress = JITO_RESTAKING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    ncn: { value: input.ncn ?? null, isWritable: true },
    oldAdmin: { value: input.oldAdmin ?? null, isWritable: false },
    newAdmin: { value: input.newAdmin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.oldAdmin),
      getAccountMeta(accounts.newAdmin),
    ],
    programAddress,
    data: getNcnSetAdminInstructionDataEncoder().encode({}),
  } as NcnSetAdminInstruction<
    typeof JITO_RESTAKING_PROGRAM_ADDRESS,
    TAccountNcn,
    TAccountOldAdmin,
    TAccountNewAdmin
  >;

  return instruction;
}

export type ParsedNcnSetAdminInstruction<
  TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    ncn: TAccountMetas[0];
    oldAdmin: TAccountMetas[1];
    newAdmin: TAccountMetas[2];
  };
  data: NcnSetAdminInstructionData;
};

export function parseNcnSetAdminInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedNcnSetAdminInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      ncn: getNextAccount(),
      oldAdmin: getNextAccount(),
      newAdmin: getNextAccount(),
    },
    data: getNcnSetAdminInstructionDataDecoder().decode(instruction.data),
  };
}
