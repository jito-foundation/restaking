/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_RESTAKING_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const NCN_WITHDRAWAL_ASSET_DISCRIMINATOR = 21;

export function getNcnWithdrawalAssetDiscriminatorBytes() {
  return getU8Encoder().encode(NCN_WITHDRAWAL_ASSET_DISCRIMINATOR);
}

export type NcnWithdrawalAssetInstruction<
  TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountNcnTokenAccount extends string | IAccountMeta<string> = string,
  TAccountReceiverTokenAccount extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountNcnTokenAccount extends string
        ? WritableAccount<TAccountNcnTokenAccount>
        : TAccountNcnTokenAccount,
      TAccountReceiverTokenAccount extends string
        ? WritableAccount<TAccountReceiverTokenAccount>
        : TAccountReceiverTokenAccount,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type NcnWithdrawalAssetInstructionData = {
  discriminator: number;
  tokenMint: Address;
  amount: bigint;
};

export type NcnWithdrawalAssetInstructionDataArgs = {
  tokenMint: Address;
  amount: number | bigint;
};

export function getNcnWithdrawalAssetInstructionDataEncoder(): Encoder<NcnWithdrawalAssetInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['tokenMint', getAddressEncoder()],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: NCN_WITHDRAWAL_ASSET_DISCRIMINATOR })
  );
}

export function getNcnWithdrawalAssetInstructionDataDecoder(): Decoder<NcnWithdrawalAssetInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['tokenMint', getAddressDecoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getNcnWithdrawalAssetInstructionDataCodec(): Codec<
  NcnWithdrawalAssetInstructionDataArgs,
  NcnWithdrawalAssetInstructionData
> {
  return combineCodec(
    getNcnWithdrawalAssetInstructionDataEncoder(),
    getNcnWithdrawalAssetInstructionDataDecoder()
  );
}

export type NcnWithdrawalAssetInput<
  TAccountNcn extends string = string,
  TAccountNcnTokenAccount extends string = string,
  TAccountReceiverTokenAccount extends string = string,
  TAccountAdmin extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  ncn: Address<TAccountNcn>;
  ncnTokenAccount: Address<TAccountNcnTokenAccount>;
  receiverTokenAccount: Address<TAccountReceiverTokenAccount>;
  admin: TransactionSigner<TAccountAdmin>;
  tokenProgram?: Address<TAccountTokenProgram>;
  tokenMint: NcnWithdrawalAssetInstructionDataArgs['tokenMint'];
  amount: NcnWithdrawalAssetInstructionDataArgs['amount'];
};

export function getNcnWithdrawalAssetInstruction<
  TAccountNcn extends string,
  TAccountNcnTokenAccount extends string,
  TAccountReceiverTokenAccount extends string,
  TAccountAdmin extends string,
  TAccountTokenProgram extends string,
>(
  input: NcnWithdrawalAssetInput<
    TAccountNcn,
    TAccountNcnTokenAccount,
    TAccountReceiverTokenAccount,
    TAccountAdmin,
    TAccountTokenProgram
  >
): NcnWithdrawalAssetInstruction<
  typeof JITO_RESTAKING_PROGRAM_ADDRESS,
  TAccountNcn,
  TAccountNcnTokenAccount,
  TAccountReceiverTokenAccount,
  TAccountAdmin,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = JITO_RESTAKING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    ncn: { value: input.ncn ?? null, isWritable: false },
    ncnTokenAccount: { value: input.ncnTokenAccount ?? null, isWritable: true },
    receiverTokenAccount: {
      value: input.receiverTokenAccount ?? null,
      isWritable: true,
    },
    admin: { value: input.admin ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.ncnTokenAccount),
      getAccountMeta(accounts.receiverTokenAccount),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getNcnWithdrawalAssetInstructionDataEncoder().encode(
      args as NcnWithdrawalAssetInstructionDataArgs
    ),
  } as NcnWithdrawalAssetInstruction<
    typeof JITO_RESTAKING_PROGRAM_ADDRESS,
    TAccountNcn,
    TAccountNcnTokenAccount,
    TAccountReceiverTokenAccount,
    TAccountAdmin,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedNcnWithdrawalAssetInstruction<
  TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    ncn: TAccountMetas[0];
    ncnTokenAccount: TAccountMetas[1];
    receiverTokenAccount: TAccountMetas[2];
    admin: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
  };
  data: NcnWithdrawalAssetInstructionData;
};

export function parseNcnWithdrawalAssetInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedNcnWithdrawalAssetInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      ncn: getNextAccount(),
      ncnTokenAccount: getNextAccount(),
      receiverTokenAccount: getNextAccount(),
      admin: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getNcnWithdrawalAssetInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
