/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import {
  getPodU64Decoder,
  getPodU64Encoder,
  type PodU64,
  type PodU64Args,
} from '../types';

export type Operator = {
  base: Address;
  admin: Address;
  ncnAdmin: Address;
  vaultAdmin: Address;
  withdrawalAdmin: Address;
  withdrawalFeeWallet: Address;
  voter: Address;
  index: PodU64;
  ncnCount: PodU64;
  vaultCount: PodU64;
  bump: number;
  reservedSpace: Array<number>;
};

export type OperatorArgs = {
  base: Address;
  admin: Address;
  ncnAdmin: Address;
  vaultAdmin: Address;
  withdrawalAdmin: Address;
  withdrawalFeeWallet: Address;
  voter: Address;
  index: PodU64Args;
  ncnCount: PodU64Args;
  vaultCount: PodU64Args;
  bump: number;
  reservedSpace: Array<number>;
};

export function getOperatorEncoder(): Encoder<OperatorArgs> {
  return getStructEncoder([
    ['base', getAddressEncoder()],
    ['admin', getAddressEncoder()],
    ['ncnAdmin', getAddressEncoder()],
    ['vaultAdmin', getAddressEncoder()],
    ['withdrawalAdmin', getAddressEncoder()],
    ['withdrawalFeeWallet', getAddressEncoder()],
    ['voter', getAddressEncoder()],
    ['index', getPodU64Encoder()],
    ['ncnCount', getPodU64Encoder()],
    ['vaultCount', getPodU64Encoder()],
    ['bump', getU8Encoder()],
    ['reservedSpace', getArrayEncoder(getU8Encoder(), { size: 7 })],
  ]);
}

export function getOperatorDecoder(): Decoder<Operator> {
  return getStructDecoder([
    ['base', getAddressDecoder()],
    ['admin', getAddressDecoder()],
    ['ncnAdmin', getAddressDecoder()],
    ['vaultAdmin', getAddressDecoder()],
    ['withdrawalAdmin', getAddressDecoder()],
    ['withdrawalFeeWallet', getAddressDecoder()],
    ['voter', getAddressDecoder()],
    ['index', getPodU64Decoder()],
    ['ncnCount', getPodU64Decoder()],
    ['vaultCount', getPodU64Decoder()],
    ['bump', getU8Decoder()],
    ['reservedSpace', getArrayDecoder(getU8Decoder(), { size: 7 })],
  ]);
}

export function getOperatorCodec(): Codec<OperatorArgs, Operator> {
  return combineCodec(getOperatorEncoder(), getOperatorDecoder());
}

export function decodeOperator<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Operator, TAddress>;
export function decodeOperator<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Operator, TAddress>;
export function decodeOperator<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Operator, TAddress> | MaybeAccount<Operator, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getOperatorDecoder()
  );
}

export async function fetchOperator<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Operator, TAddress>> {
  const maybeAccount = await fetchMaybeOperator(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeOperator<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Operator, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeOperator(maybeAccount);
}

export async function fetchAllOperator(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Operator>[]> {
  const maybeAccounts = await fetchAllMaybeOperator(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeOperator(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Operator>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeOperator(maybeAccount));
}
