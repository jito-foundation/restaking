/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import {
  getPodU64Decoder,
  getPodU64Encoder,
  type PodU64,
  type PodU64Args,
} from '../types';

export type Ncn = {
  base: Address;
  admin: Address;
  operatorAdmin: Address;
  vaultAdmin: Address;
  slasherAdmin: Address;
  withdrawAdmin: Address;
  withdrawFeeWallet: Address;
  index: PodU64;
  operatorCount: PodU64;
  vaultCount: PodU64;
  slasherCount: PodU64;
  bump: number;
  reserved: Array<number>;
};

export type NcnArgs = {
  base: Address;
  admin: Address;
  operatorAdmin: Address;
  vaultAdmin: Address;
  slasherAdmin: Address;
  withdrawAdmin: Address;
  withdrawFeeWallet: Address;
  index: PodU64Args;
  operatorCount: PodU64Args;
  vaultCount: PodU64Args;
  slasherCount: PodU64Args;
  bump: number;
  reserved: Array<number>;
};

export function getNcnEncoder(): Encoder<NcnArgs> {
  return getStructEncoder([
    ['base', getAddressEncoder()],
    ['admin', getAddressEncoder()],
    ['operatorAdmin', getAddressEncoder()],
    ['vaultAdmin', getAddressEncoder()],
    ['slasherAdmin', getAddressEncoder()],
    ['withdrawAdmin', getAddressEncoder()],
    ['withdrawFeeWallet', getAddressEncoder()],
    ['index', getPodU64Encoder()],
    ['operatorCount', getPodU64Encoder()],
    ['vaultCount', getPodU64Encoder()],
    ['slasherCount', getPodU64Encoder()],
    ['bump', getU8Encoder()],
    ['reserved', getArrayEncoder(getU8Encoder(), { size: 7 })],
  ]);
}

export function getNcnDecoder(): Decoder<Ncn> {
  return getStructDecoder([
    ['base', getAddressDecoder()],
    ['admin', getAddressDecoder()],
    ['operatorAdmin', getAddressDecoder()],
    ['vaultAdmin', getAddressDecoder()],
    ['slasherAdmin', getAddressDecoder()],
    ['withdrawAdmin', getAddressDecoder()],
    ['withdrawFeeWallet', getAddressDecoder()],
    ['index', getPodU64Decoder()],
    ['operatorCount', getPodU64Decoder()],
    ['vaultCount', getPodU64Decoder()],
    ['slasherCount', getPodU64Decoder()],
    ['bump', getU8Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 7 })],
  ]);
}

export function getNcnCodec(): Codec<NcnArgs, Ncn> {
  return combineCodec(getNcnEncoder(), getNcnDecoder());
}

export function decodeNcn<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Ncn, TAddress>;
export function decodeNcn<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Ncn, TAddress>;
export function decodeNcn<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Ncn, TAddress> | MaybeAccount<Ncn, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getNcnDecoder()
  );
}

export async function fetchNcn<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Ncn, TAddress>> {
  const maybeAccount = await fetchMaybeNcn(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeNcn<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Ncn, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeNcn(maybeAccount);
}

export async function fetchAllNcn(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Ncn>[]> {
  const maybeAccounts = await fetchAllMaybeNcn(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeNcn(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Ncn>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeNcn(maybeAccount));
}

export function getNcnSize(): number {
  return 264;
}
