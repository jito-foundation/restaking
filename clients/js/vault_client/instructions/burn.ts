/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const BURN_DISCRIMINATOR = 12;

export function getBurnDiscriminatorBytes() {
  return getU8Encoder().encode(BURN_DISCRIMINATOR);
}

export type BurnInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountVaultTokenAccount extends string | IAccountMeta<string> = string,
  TAccountVrtMint extends string | IAccountMeta<string> = string,
  TAccountStaker extends string | IAccountMeta<string> = string,
  TAccountStakerTokenAccount extends string | IAccountMeta<string> = string,
  TAccountStakerVrtTokenAccount extends string | IAccountMeta<string> = string,
  TAccountVaultFeeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountBurnSigner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountVaultTokenAccount extends string
        ? WritableAccount<TAccountVaultTokenAccount>
        : TAccountVaultTokenAccount,
      TAccountVrtMint extends string
        ? WritableAccount<TAccountVrtMint>
        : TAccountVrtMint,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            IAccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountStakerTokenAccount extends string
        ? WritableAccount<TAccountStakerTokenAccount>
        : TAccountStakerTokenAccount,
      TAccountStakerVrtTokenAccount extends string
        ? ReadonlySignerAccount<TAccountStakerVrtTokenAccount> &
            IAccountSignerMeta<TAccountStakerVrtTokenAccount>
        : TAccountStakerVrtTokenAccount,
      TAccountVaultFeeTokenAccount extends string
        ? WritableAccount<TAccountVaultFeeTokenAccount>
        : TAccountVaultFeeTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountBurnSigner extends string
        ? ReadonlySignerAccount<TAccountBurnSigner> &
            IAccountSignerMeta<TAccountBurnSigner>
        : TAccountBurnSigner,
      ...TRemainingAccounts,
    ]
  >;

export type BurnInstructionData = {
  discriminator: number;
  amountIn: bigint;
  minAmountOut: bigint;
};

export type BurnInstructionDataArgs = {
  amountIn: number | bigint;
  minAmountOut: number | bigint;
};

export function getBurnInstructionDataEncoder(): Encoder<BurnInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amountIn', getU64Encoder()],
      ['minAmountOut', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BURN_DISCRIMINATOR })
  );
}

export function getBurnInstructionDataDecoder(): Decoder<BurnInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amountIn', getU64Decoder()],
    ['minAmountOut', getU64Decoder()],
  ]);
}

export function getBurnInstructionDataCodec(): Codec<
  BurnInstructionDataArgs,
  BurnInstructionData
> {
  return combineCodec(
    getBurnInstructionDataEncoder(),
    getBurnInstructionDataDecoder()
  );
}

export type BurnInput<
  TAccountConfig extends string = string,
  TAccountVault extends string = string,
  TAccountVaultTokenAccount extends string = string,
  TAccountVrtMint extends string = string,
  TAccountStaker extends string = string,
  TAccountStakerTokenAccount extends string = string,
  TAccountStakerVrtTokenAccount extends string = string,
  TAccountVaultFeeTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountBurnSigner extends string = string,
> = {
  config: Address<TAccountConfig>;
  vault: Address<TAccountVault>;
  vaultTokenAccount: Address<TAccountVaultTokenAccount>;
  vrtMint: Address<TAccountVrtMint>;
  staker: TransactionSigner<TAccountStaker>;
  stakerTokenAccount: Address<TAccountStakerTokenAccount>;
  stakerVrtTokenAccount: TransactionSigner<TAccountStakerVrtTokenAccount>;
  vaultFeeTokenAccount: Address<TAccountVaultFeeTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  /** Signer for burning */
  burnSigner?: TransactionSigner<TAccountBurnSigner>;
  amountIn: BurnInstructionDataArgs['amountIn'];
  minAmountOut: BurnInstructionDataArgs['minAmountOut'];
};

export function getBurnInstruction<
  TAccountConfig extends string,
  TAccountVault extends string,
  TAccountVaultTokenAccount extends string,
  TAccountVrtMint extends string,
  TAccountStaker extends string,
  TAccountStakerTokenAccount extends string,
  TAccountStakerVrtTokenAccount extends string,
  TAccountVaultFeeTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountBurnSigner extends string,
>(
  input: BurnInput<
    TAccountConfig,
    TAccountVault,
    TAccountVaultTokenAccount,
    TAccountVrtMint,
    TAccountStaker,
    TAccountStakerTokenAccount,
    TAccountStakerVrtTokenAccount,
    TAccountVaultFeeTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountBurnSigner
  >
): BurnInstruction<
  typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountConfig,
  TAccountVault,
  TAccountVaultTokenAccount,
  TAccountVrtMint,
  TAccountStaker,
  TAccountStakerTokenAccount,
  TAccountStakerVrtTokenAccount,
  TAccountVaultFeeTokenAccount,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountBurnSigner
> {
  // Program address.
  const programAddress = JITO_VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: true },
    vaultTokenAccount: {
      value: input.vaultTokenAccount ?? null,
      isWritable: true,
    },
    vrtMint: { value: input.vrtMint ?? null, isWritable: true },
    staker: { value: input.staker ?? null, isWritable: false },
    stakerTokenAccount: {
      value: input.stakerTokenAccount ?? null,
      isWritable: true,
    },
    stakerVrtTokenAccount: {
      value: input.stakerVrtTokenAccount ?? null,
      isWritable: false,
    },
    vaultFeeTokenAccount: {
      value: input.vaultFeeTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    burnSigner: { value: input.burnSigner ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vaultTokenAccount),
      getAccountMeta(accounts.vrtMint),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.stakerTokenAccount),
      getAccountMeta(accounts.stakerVrtTokenAccount),
      getAccountMeta(accounts.vaultFeeTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.burnSigner),
    ],
    programAddress,
    data: getBurnInstructionDataEncoder().encode(
      args as BurnInstructionDataArgs
    ),
  } as BurnInstruction<
    typeof JITO_VAULT_PROGRAM_ADDRESS,
    TAccountConfig,
    TAccountVault,
    TAccountVaultTokenAccount,
    TAccountVrtMint,
    TAccountStaker,
    TAccountStakerTokenAccount,
    TAccountStakerVrtTokenAccount,
    TAccountVaultFeeTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountBurnSigner
  >;

  return instruction;
}

export type ParsedBurnInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    vault: TAccountMetas[1];
    vaultTokenAccount: TAccountMetas[2];
    vrtMint: TAccountMetas[3];
    staker: TAccountMetas[4];
    stakerTokenAccount: TAccountMetas[5];
    stakerVrtTokenAccount: TAccountMetas[6];
    vaultFeeTokenAccount: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    /** Signer for burning */
    burnSigner?: TAccountMetas[10] | undefined;
  };
  data: BurnInstructionData;
};

export function parseBurnInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedBurnInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === JITO_VAULT_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      vault: getNextAccount(),
      vaultTokenAccount: getNextAccount(),
      vrtMint: getNextAccount(),
      staker: getNextAccount(),
      stakerTokenAccount: getNextAccount(),
      stakerVrtTokenAccount: getNextAccount(),
      vaultFeeTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      burnSigner: getNextOptionalAccount(),
    },
    data: getBurnInstructionDataDecoder().decode(instruction.data),
  };
}
