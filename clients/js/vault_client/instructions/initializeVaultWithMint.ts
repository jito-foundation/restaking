/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
} from '@solana/web3.js';
import { JITO_VAULT_PROGRAM_ADDRESS } from '../programs';

export const INITIALIZE_VAULT_WITH_MINT_DISCRIMINATOR = 2;

export function getInitializeVaultWithMintDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_VAULT_WITH_MINT_DISCRIMINATOR);
}

export type InitializeVaultWithMintInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type InitializeVaultWithMintInstructionData = { discriminator: number };

export type InitializeVaultWithMintInstructionDataArgs = {};

export function getInitializeVaultWithMintInstructionDataEncoder(): Encoder<InitializeVaultWithMintInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_VAULT_WITH_MINT_DISCRIMINATOR,
    })
  );
}

export function getInitializeVaultWithMintInstructionDataDecoder(): Decoder<InitializeVaultWithMintInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getInitializeVaultWithMintInstructionDataCodec(): Codec<
  InitializeVaultWithMintInstructionDataArgs,
  InitializeVaultWithMintInstructionData
> {
  return combineCodec(
    getInitializeVaultWithMintInstructionDataEncoder(),
    getInitializeVaultWithMintInstructionDataDecoder()
  );
}

export type InitializeVaultWithMintInput = {};

export function getInitializeVaultWithMintInstruction(
  input: InitializeVaultWithMintInput
): InitializeVaultWithMintInstruction<typeof JITO_VAULT_PROGRAM_ADDRESS> {
  // Program address.
  const programAddress = JITO_VAULT_PROGRAM_ADDRESS;

  const instruction = {
    programAddress,
    data: getInitializeVaultWithMintInstructionDataEncoder().encode({}),
  } as InitializeVaultWithMintInstruction<typeof JITO_VAULT_PROGRAM_ADDRESS>;

  return instruction;
}

export type ParsedInitializeVaultWithMintInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: InitializeVaultWithMintInstructionData;
};

export function parseInitializeVaultWithMintInstruction<
  TProgram extends string,
>(
  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>
): ParsedInitializeVaultWithMintInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getInitializeVaultWithMintInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
