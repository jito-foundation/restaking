/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CRANK_VAULT_UPDATE_STATE_TRACKER_DISCRIMINATOR = 25;

export function getCrankVaultUpdateStateTrackerDiscriminatorBytes() {
  return getU8Encoder().encode(CRANK_VAULT_UPDATE_STATE_TRACKER_DISCRIMINATOR);
}

export type CrankVaultUpdateStateTrackerInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountOperator extends string | IAccountMeta<string> = string,
  TAccountVaultOperatorDelegation extends
    | string
    | IAccountMeta<string> = string,
  TAccountVaultUpdateStateTracker extends
    | string
    | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountVault extends string
        ? ReadonlyAccount<TAccountVault>
        : TAccountVault,
      TAccountOperator extends string
        ? ReadonlyAccount<TAccountOperator>
        : TAccountOperator,
      TAccountVaultOperatorDelegation extends string
        ? WritableAccount<TAccountVaultOperatorDelegation>
        : TAccountVaultOperatorDelegation,
      TAccountVaultUpdateStateTracker extends string
        ? WritableAccount<TAccountVaultUpdateStateTracker>
        : TAccountVaultUpdateStateTracker,
      ...TRemainingAccounts,
    ]
  >;

export type CrankVaultUpdateStateTrackerInstructionData = {
  discriminator: number;
};

export type CrankVaultUpdateStateTrackerInstructionDataArgs = {};

export function getCrankVaultUpdateStateTrackerInstructionDataEncoder(): Encoder<CrankVaultUpdateStateTrackerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: CRANK_VAULT_UPDATE_STATE_TRACKER_DISCRIMINATOR,
    })
  );
}

export function getCrankVaultUpdateStateTrackerInstructionDataDecoder(): Decoder<CrankVaultUpdateStateTrackerInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getCrankVaultUpdateStateTrackerInstructionDataCodec(): Codec<
  CrankVaultUpdateStateTrackerInstructionDataArgs,
  CrankVaultUpdateStateTrackerInstructionData
> {
  return combineCodec(
    getCrankVaultUpdateStateTrackerInstructionDataEncoder(),
    getCrankVaultUpdateStateTrackerInstructionDataDecoder()
  );
}

export type CrankVaultUpdateStateTrackerInput<
  TAccountConfig extends string = string,
  TAccountVault extends string = string,
  TAccountOperator extends string = string,
  TAccountVaultOperatorDelegation extends string = string,
  TAccountVaultUpdateStateTracker extends string = string,
> = {
  config: Address<TAccountConfig>;
  vault: Address<TAccountVault>;
  operator: Address<TAccountOperator>;
  vaultOperatorDelegation: Address<TAccountVaultOperatorDelegation>;
  vaultUpdateStateTracker: Address<TAccountVaultUpdateStateTracker>;
};

export function getCrankVaultUpdateStateTrackerInstruction<
  TAccountConfig extends string,
  TAccountVault extends string,
  TAccountOperator extends string,
  TAccountVaultOperatorDelegation extends string,
  TAccountVaultUpdateStateTracker extends string,
>(
  input: CrankVaultUpdateStateTrackerInput<
    TAccountConfig,
    TAccountVault,
    TAccountOperator,
    TAccountVaultOperatorDelegation,
    TAccountVaultUpdateStateTracker
  >
): CrankVaultUpdateStateTrackerInstruction<
  typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountConfig,
  TAccountVault,
  TAccountOperator,
  TAccountVaultOperatorDelegation,
  TAccountVaultUpdateStateTracker
> {
  // Program address.
  const programAddress = JITO_VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: false },
    operator: { value: input.operator ?? null, isWritable: false },
    vaultOperatorDelegation: {
      value: input.vaultOperatorDelegation ?? null,
      isWritable: true,
    },
    vaultUpdateStateTracker: {
      value: input.vaultUpdateStateTracker ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.vaultOperatorDelegation),
      getAccountMeta(accounts.vaultUpdateStateTracker),
    ],
    programAddress,
    data: getCrankVaultUpdateStateTrackerInstructionDataEncoder().encode({}),
  } as CrankVaultUpdateStateTrackerInstruction<
    typeof JITO_VAULT_PROGRAM_ADDRESS,
    TAccountConfig,
    TAccountVault,
    TAccountOperator,
    TAccountVaultOperatorDelegation,
    TAccountVaultUpdateStateTracker
  >;

  return instruction;
}

export type ParsedCrankVaultUpdateStateTrackerInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    vault: TAccountMetas[1];
    operator: TAccountMetas[2];
    vaultOperatorDelegation: TAccountMetas[3];
    vaultUpdateStateTracker: TAccountMetas[4];
  };
  data: CrankVaultUpdateStateTrackerInstructionData;
};

export function parseCrankVaultUpdateStateTrackerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCrankVaultUpdateStateTrackerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      vault: getNextAccount(),
      operator: getNextAccount(),
      vaultOperatorDelegation: getNextAccount(),
      vaultUpdateStateTracker: getNextAccount(),
    },
    data: getCrankVaultUpdateStateTrackerInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
