/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { JITO_VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_TOKEN_METADATA_DISCRIMINATOR = 27;

export function getCreateTokenMetadataDiscriminatorBytes() {
  return getU8Encoder().encode(CREATE_TOKEN_METADATA_DISCRIMINATOR);
}

export type CreateTokenMetadataInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountVrtMint extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountMetadata extends string | IAccountMeta<string> = string,
  TAccountMplTokenMetadataProgram extends
    | string
    | IAccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVault extends string
        ? ReadonlyAccount<TAccountVault>
        : TAccountVault,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountVrtMint extends string
        ? ReadonlyAccount<TAccountVrtMint>
        : TAccountVrtMint,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountMplTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountMplTokenMetadataProgram>
        : TAccountMplTokenMetadataProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateTokenMetadataInstructionData = {
  discriminator: number;
  name: string;
  symbol: string;
  uri: string;
};

export type CreateTokenMetadataInstructionDataArgs = {
  name: string;
  symbol: string;
  uri: string;
};

export function getCreateTokenMetadataInstructionDataEncoder(): Encoder<CreateTokenMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['symbol', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_TOKEN_METADATA_DISCRIMINATOR,
    })
  );
}

export function getCreateTokenMetadataInstructionDataDecoder(): Decoder<CreateTokenMetadataInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['symbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getCreateTokenMetadataInstructionDataCodec(): Codec<
  CreateTokenMetadataInstructionDataArgs,
  CreateTokenMetadataInstructionData
> {
  return combineCodec(
    getCreateTokenMetadataInstructionDataEncoder(),
    getCreateTokenMetadataInstructionDataDecoder()
  );
}

export type CreateTokenMetadataInput<
  TAccountVault extends string = string,
  TAccountAdmin extends string = string,
  TAccountVrtMint extends string = string,
  TAccountPayer extends string = string,
  TAccountMetadata extends string = string,
  TAccountMplTokenMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  vault: Address<TAccountVault>;
  admin: TransactionSigner<TAccountAdmin>;
  vrtMint: Address<TAccountVrtMint>;
  payer: TransactionSigner<TAccountPayer>;
  metadata: Address<TAccountMetadata>;
  mplTokenMetadataProgram?: Address<TAccountMplTokenMetadataProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: CreateTokenMetadataInstructionDataArgs['name'];
  symbol: CreateTokenMetadataInstructionDataArgs['symbol'];
  uri: CreateTokenMetadataInstructionDataArgs['uri'];
};

export function getCreateTokenMetadataInstruction<
  TAccountVault extends string,
  TAccountAdmin extends string,
  TAccountVrtMint extends string,
  TAccountPayer extends string,
  TAccountMetadata extends string,
  TAccountMplTokenMetadataProgram extends string,
  TAccountSystemProgram extends string,
>(
  input: CreateTokenMetadataInput<
    TAccountVault,
    TAccountAdmin,
    TAccountVrtMint,
    TAccountPayer,
    TAccountMetadata,
    TAccountMplTokenMetadataProgram,
    TAccountSystemProgram
  >
): CreateTokenMetadataInstruction<
  typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountVault,
  TAccountAdmin,
  TAccountVrtMint,
  TAccountPayer,
  TAccountMetadata,
  TAccountMplTokenMetadataProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = JITO_VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vault: { value: input.vault ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: false },
    vrtMint: { value: input.vrtMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    metadata: { value: input.metadata ?? null, isWritable: true },
    mplTokenMetadataProgram: {
      value: input.mplTokenMetadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.mplTokenMetadataProgram.value) {
    accounts.mplTokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.vrtMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.mplTokenMetadataProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateTokenMetadataInstructionDataEncoder().encode(
      args as CreateTokenMetadataInstructionDataArgs
    ),
  } as CreateTokenMetadataInstruction<
    typeof JITO_VAULT_PROGRAM_ADDRESS,
    TAccountVault,
    TAccountAdmin,
    TAccountVrtMint,
    TAccountPayer,
    TAccountMetadata,
    TAccountMplTokenMetadataProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateTokenMetadataInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    vault: TAccountMetas[0];
    admin: TAccountMetas[1];
    vrtMint: TAccountMetas[2];
    payer: TAccountMetas[3];
    metadata: TAccountMetas[4];
    mplTokenMetadataProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: CreateTokenMetadataInstructionData;
};

export function parseCreateTokenMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateTokenMetadataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vault: getNextAccount(),
      admin: getNextAccount(),
      vrtMint: getNextAccount(),
      payer: getNextAccount(),
      metadata: getNextAccount(),
      mplTokenMetadataProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateTokenMetadataInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
