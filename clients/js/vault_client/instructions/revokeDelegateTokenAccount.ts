/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REVOKE_DELEGATE_TOKEN_ACCOUNT_DISCRIMINATOR = 21;

export function getRevokeDelegateTokenAccountDiscriminatorBytes() {
  return getU8Encoder().encode(REVOKE_DELEGATE_TOKEN_ACCOUNT_DISCRIMINATOR);
}

export type RevokeDelegateTokenAccountInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountDelegateAssetAdmin extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountVault extends string
        ? ReadonlyAccount<TAccountVault>
        : TAccountVault,
      TAccountDelegateAssetAdmin extends string
        ? ReadonlySignerAccount<TAccountDelegateAssetAdmin> &
            IAccountSignerMeta<TAccountDelegateAssetAdmin>
        : TAccountDelegateAssetAdmin,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RevokeDelegateTokenAccountInstructionData = {
  discriminator: number;
};

export type RevokeDelegateTokenAccountInstructionDataArgs = {};

export function getRevokeDelegateTokenAccountInstructionDataEncoder(): Encoder<RevokeDelegateTokenAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: REVOKE_DELEGATE_TOKEN_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getRevokeDelegateTokenAccountInstructionDataDecoder(): Decoder<RevokeDelegateTokenAccountInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getRevokeDelegateTokenAccountInstructionDataCodec(): Codec<
  RevokeDelegateTokenAccountInstructionDataArgs,
  RevokeDelegateTokenAccountInstructionData
> {
  return combineCodec(
    getRevokeDelegateTokenAccountInstructionDataEncoder(),
    getRevokeDelegateTokenAccountInstructionDataDecoder()
  );
}

export type RevokeDelegateTokenAccountInput<
  TAccountConfig extends string = string,
  TAccountVault extends string = string,
  TAccountDelegateAssetAdmin extends string = string,
  TAccountTokenMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  vault: Address<TAccountVault>;
  delegateAssetAdmin: TransactionSigner<TAccountDelegateAssetAdmin>;
  tokenMint: Address<TAccountTokenMint>;
  tokenAccount: Address<TAccountTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getRevokeDelegateTokenAccountInstruction<
  TAccountConfig extends string,
  TAccountVault extends string,
  TAccountDelegateAssetAdmin extends string,
  TAccountTokenMint extends string,
  TAccountTokenAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof JITO_VAULT_PROGRAM_ADDRESS,
>(
  input: RevokeDelegateTokenAccountInput<
    TAccountConfig,
    TAccountVault,
    TAccountDelegateAssetAdmin,
    TAccountTokenMint,
    TAccountTokenAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RevokeDelegateTokenAccountInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountVault,
  TAccountDelegateAssetAdmin,
  TAccountTokenMint,
  TAccountTokenAccount,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? JITO_VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: false },
    delegateAssetAdmin: {
      value: input.delegateAssetAdmin ?? null,
      isWritable: false,
    },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.delegateAssetAdmin),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getRevokeDelegateTokenAccountInstructionDataEncoder().encode({}),
  } as RevokeDelegateTokenAccountInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountVault,
    TAccountDelegateAssetAdmin,
    TAccountTokenMint,
    TAccountTokenAccount,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedRevokeDelegateTokenAccountInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    vault: TAccountMetas[1];
    delegateAssetAdmin: TAccountMetas[2];
    tokenMint: TAccountMetas[3];
    tokenAccount: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
  };
  data: RevokeDelegateTokenAccountInstructionData;
};

export function parseRevokeDelegateTokenAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRevokeDelegateTokenAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      vault: getNextAccount(),
      delegateAssetAdmin: getNextAccount(),
      tokenMint: getNextAccount(),
      tokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getRevokeDelegateTokenAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
