/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { JITO_VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_VAULT_DISCRIMINATOR = 1;

export function getInitializeVaultDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_VAULT_DISCRIMINATOR);
}

export type InitializeVaultInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountVrtMint extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountBase extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountVrtMint extends string
        ? WritableSignerAccount<TAccountVrtMint> &
            IAccountSignerMeta<TAccountVrtMint>
        : TAccountVrtMint,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountBase extends string
        ? ReadonlySignerAccount<TAccountBase> & IAccountSignerMeta<TAccountBase>
        : TAccountBase,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeVaultInstructionData = {
  discriminator: number;
  depositFeeBps: number;
  withdrawalFeeBps: number;
  rewardFeeBps: number;
};

export type InitializeVaultInstructionDataArgs = {
  depositFeeBps: number;
  withdrawalFeeBps: number;
  rewardFeeBps: number;
};

export function getInitializeVaultInstructionDataEncoder(): Encoder<InitializeVaultInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['depositFeeBps', getU16Encoder()],
      ['withdrawalFeeBps', getU16Encoder()],
      ['rewardFeeBps', getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_VAULT_DISCRIMINATOR })
  );
}

export function getInitializeVaultInstructionDataDecoder(): Decoder<InitializeVaultInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['depositFeeBps', getU16Decoder()],
    ['withdrawalFeeBps', getU16Decoder()],
    ['rewardFeeBps', getU16Decoder()],
  ]);
}

export function getInitializeVaultInstructionDataCodec(): Codec<
  InitializeVaultInstructionDataArgs,
  InitializeVaultInstructionData
> {
  return combineCodec(
    getInitializeVaultInstructionDataEncoder(),
    getInitializeVaultInstructionDataDecoder()
  );
}

export type InitializeVaultInput<
  TAccountConfig extends string = string,
  TAccountVault extends string = string,
  TAccountVrtMint extends string = string,
  TAccountTokenMint extends string = string,
  TAccountAdmin extends string = string,
  TAccountBase extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  vault: Address<TAccountVault>;
  vrtMint: TransactionSigner<TAccountVrtMint>;
  tokenMint: Address<TAccountTokenMint>;
  admin: TransactionSigner<TAccountAdmin>;
  base: TransactionSigner<TAccountBase>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  depositFeeBps: InitializeVaultInstructionDataArgs['depositFeeBps'];
  withdrawalFeeBps: InitializeVaultInstructionDataArgs['withdrawalFeeBps'];
  rewardFeeBps: InitializeVaultInstructionDataArgs['rewardFeeBps'];
};

export function getInitializeVaultInstruction<
  TAccountConfig extends string,
  TAccountVault extends string,
  TAccountVrtMint extends string,
  TAccountTokenMint extends string,
  TAccountAdmin extends string,
  TAccountBase extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
>(
  input: InitializeVaultInput<
    TAccountConfig,
    TAccountVault,
    TAccountVrtMint,
    TAccountTokenMint,
    TAccountAdmin,
    TAccountBase,
    TAccountSystemProgram,
    TAccountTokenProgram
  >
): InitializeVaultInstruction<
  typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountConfig,
  TAccountVault,
  TAccountVrtMint,
  TAccountTokenMint,
  TAccountAdmin,
  TAccountBase,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = JITO_VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    vrtMint: { value: input.vrtMint ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
    base: { value: input.base ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vrtMint),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitializeVaultInstructionDataEncoder().encode(
      args as InitializeVaultInstructionDataArgs
    ),
  } as InitializeVaultInstruction<
    typeof JITO_VAULT_PROGRAM_ADDRESS,
    TAccountConfig,
    TAccountVault,
    TAccountVrtMint,
    TAccountTokenMint,
    TAccountAdmin,
    TAccountBase,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedInitializeVaultInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    vault: TAccountMetas[1];
    vrtMint: TAccountMetas[2];
    tokenMint: TAccountMetas[3];
    admin: TAccountMetas[4];
    base: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
  };
  data: InitializeVaultInstructionData;
};

export function parseInitializeVaultInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeVaultInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      vault: getNextAccount(),
      vrtMint: getNextAccount(),
      tokenMint: getNextAccount(),
      admin: getNextAccount(),
      base: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getInitializeVaultInstructionDataDecoder().decode(instruction.data),
  };
}
