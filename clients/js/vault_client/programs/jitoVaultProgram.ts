/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedAddDelegationInstruction,
  type ParsedAdminWithdrawInstruction,
  type ParsedBurnInstruction,
  type ParsedBurnWithdrawTicketInstruction,
  type ParsedChangeWithdrawalTicketOwnerInstruction,
  type ParsedCloseVaultUpdateStateTrackerInstruction,
  type ParsedCooldownDelegationInstruction,
  type ParsedCooldownVaultNcnSlasherTicketInstruction,
  type ParsedCooldownVaultNcnTicketInstruction,
  type ParsedCrankVaultUpdateStateTrackerInstruction,
  type ParsedCreateTokenMetadataInstruction,
  type ParsedEnqueueWithdrawalInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedInitializeVaultInstruction,
  type ParsedInitializeVaultNcnSlasherOperatorTicketInstruction,
  type ParsedInitializeVaultNcnSlasherTicketInstruction,
  type ParsedInitializeVaultNcnTicketInstruction,
  type ParsedInitializeVaultOperatorDelegationInstruction,
  type ParsedInitializeVaultUpdateStateTrackerInstruction,
  type ParsedInitializeVaultWithMintInstruction,
  type ParsedMintToInstruction,
  type ParsedSetAdminInstruction,
  type ParsedSetDepositCapacityInstruction,
  type ParsedSetFeesInstruction,
  type ParsedSetSecondaryAdminInstruction,
  type ParsedSlashInstruction,
  type ParsedUpdateTokenMetadataInstruction,
  type ParsedUpdateVaultBalanceInstruction,
  type ParsedWarmupVaultNcnSlasherTicketInstruction,
  type ParsedWarmupVaultNcnTicketInstruction,
} from '../instructions';

export const JITO_VAULT_PROGRAM_PROGRAM_ADDRESS =
  'AByZUmjepqbSmpLPhr8nc28Shj5h4HYLQe1bKiiR7vYK' as Address<'AByZUmjepqbSmpLPhr8nc28Shj5h4HYLQe1bKiiR7vYK'>;

export enum JitoVaultProgramAccount {
  Config,
  Vault,
  VaultNcnSlasherOperatorTicket,
  VaultNcnSlasherTicket,
  VaultNcnTicket,
  VaultOperatorDelegation,
  VaultStakerWithdrawalTicket,
  VaultUpdateStateTracker,
}

export enum JitoVaultProgramInstruction {
  InitializeConfig,
  InitializeVault,
  InitializeVaultWithMint,
  InitializeVaultOperatorDelegation,
  InitializeVaultNcnTicket,
  InitializeVaultNcnSlasherOperatorTicket,
  InitializeVaultNcnSlasherTicket,
  WarmupVaultNcnTicket,
  CooldownVaultNcnTicket,
  WarmupVaultNcnSlasherTicket,
  CooldownVaultNcnSlasherTicket,
  MintTo,
  Burn,
  EnqueueWithdrawal,
  ChangeWithdrawalTicketOwner,
  BurnWithdrawTicket,
  SetDepositCapacity,
  SetFees,
  AdminWithdraw,
  SetAdmin,
  SetSecondaryAdmin,
  AddDelegation,
  CooldownDelegation,
  UpdateVaultBalance,
  InitializeVaultUpdateStateTracker,
  CrankVaultUpdateStateTracker,
  CloseVaultUpdateStateTracker,
  CreateTokenMetadata,
  UpdateTokenMetadata,
  Slash,
}

export function identifyJitoVaultProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): JitoVaultProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return JitoVaultProgramInstruction.InitializeConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return JitoVaultProgramInstruction.InitializeVault;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return JitoVaultProgramInstruction.InitializeVaultWithMint;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return JitoVaultProgramInstruction.InitializeVaultOperatorDelegation;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return JitoVaultProgramInstruction.InitializeVaultNcnTicket;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return JitoVaultProgramInstruction.InitializeVaultNcnSlasherOperatorTicket;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return JitoVaultProgramInstruction.InitializeVaultNcnSlasherTicket;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return JitoVaultProgramInstruction.WarmupVaultNcnTicket;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return JitoVaultProgramInstruction.CooldownVaultNcnTicket;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return JitoVaultProgramInstruction.WarmupVaultNcnSlasherTicket;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return JitoVaultProgramInstruction.CooldownVaultNcnSlasherTicket;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return JitoVaultProgramInstruction.MintTo;
  }
  if (containsBytes(data, getU8Encoder().encode(12), 0)) {
    return JitoVaultProgramInstruction.Burn;
  }
  if (containsBytes(data, getU8Encoder().encode(13), 0)) {
    return JitoVaultProgramInstruction.EnqueueWithdrawal;
  }
  if (containsBytes(data, getU8Encoder().encode(14), 0)) {
    return JitoVaultProgramInstruction.ChangeWithdrawalTicketOwner;
  }
  if (containsBytes(data, getU8Encoder().encode(15), 0)) {
    return JitoVaultProgramInstruction.BurnWithdrawTicket;
  }
  if (containsBytes(data, getU8Encoder().encode(16), 0)) {
    return JitoVaultProgramInstruction.SetDepositCapacity;
  }
  if (containsBytes(data, getU8Encoder().encode(17), 0)) {
    return JitoVaultProgramInstruction.SetFees;
  }
  if (containsBytes(data, getU8Encoder().encode(18), 0)) {
    return JitoVaultProgramInstruction.AdminWithdraw;
  }
  if (containsBytes(data, getU8Encoder().encode(19), 0)) {
    return JitoVaultProgramInstruction.SetAdmin;
  }
  if (containsBytes(data, getU8Encoder().encode(20), 0)) {
    return JitoVaultProgramInstruction.SetSecondaryAdmin;
  }
  if (containsBytes(data, getU8Encoder().encode(21), 0)) {
    return JitoVaultProgramInstruction.AddDelegation;
  }
  if (containsBytes(data, getU8Encoder().encode(22), 0)) {
    return JitoVaultProgramInstruction.CooldownDelegation;
  }
  if (containsBytes(data, getU8Encoder().encode(23), 0)) {
    return JitoVaultProgramInstruction.UpdateVaultBalance;
  }
  if (containsBytes(data, getU8Encoder().encode(24), 0)) {
    return JitoVaultProgramInstruction.InitializeVaultUpdateStateTracker;
  }
  if (containsBytes(data, getU8Encoder().encode(25), 0)) {
    return JitoVaultProgramInstruction.CrankVaultUpdateStateTracker;
  }
  if (containsBytes(data, getU8Encoder().encode(26), 0)) {
    return JitoVaultProgramInstruction.CloseVaultUpdateStateTracker;
  }
  if (containsBytes(data, getU8Encoder().encode(27), 0)) {
    return JitoVaultProgramInstruction.CreateTokenMetadata;
  }
  if (containsBytes(data, getU8Encoder().encode(28), 0)) {
    return JitoVaultProgramInstruction.UpdateTokenMetadata;
  }
  if (containsBytes(data, getU8Encoder().encode(29), 0)) {
    return JitoVaultProgramInstruction.Slash;
  }
  throw new Error(
    'The provided instruction could not be identified as a jitoVaultProgram instruction.'
  );
}

export type ParsedJitoVaultProgramInstruction<
  TProgram extends string = 'AByZUmjepqbSmpLPhr8nc28Shj5h4HYLQe1bKiiR7vYK',
> =
  | ({
      instructionType: JitoVaultProgramInstruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.InitializeVault;
    } & ParsedInitializeVaultInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.InitializeVaultWithMint;
    } & ParsedInitializeVaultWithMintInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.InitializeVaultOperatorDelegation;
    } & ParsedInitializeVaultOperatorDelegationInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.InitializeVaultNcnTicket;
    } & ParsedInitializeVaultNcnTicketInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.InitializeVaultNcnSlasherOperatorTicket;
    } & ParsedInitializeVaultNcnSlasherOperatorTicketInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.InitializeVaultNcnSlasherTicket;
    } & ParsedInitializeVaultNcnSlasherTicketInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.WarmupVaultNcnTicket;
    } & ParsedWarmupVaultNcnTicketInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.CooldownVaultNcnTicket;
    } & ParsedCooldownVaultNcnTicketInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.WarmupVaultNcnSlasherTicket;
    } & ParsedWarmupVaultNcnSlasherTicketInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.CooldownVaultNcnSlasherTicket;
    } & ParsedCooldownVaultNcnSlasherTicketInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.MintTo;
    } & ParsedMintToInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.Burn;
    } & ParsedBurnInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.EnqueueWithdrawal;
    } & ParsedEnqueueWithdrawalInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.ChangeWithdrawalTicketOwner;
    } & ParsedChangeWithdrawalTicketOwnerInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.BurnWithdrawTicket;
    } & ParsedBurnWithdrawTicketInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.SetDepositCapacity;
    } & ParsedSetDepositCapacityInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.SetFees;
    } & ParsedSetFeesInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.AdminWithdraw;
    } & ParsedAdminWithdrawInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.SetAdmin;
    } & ParsedSetAdminInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.SetSecondaryAdmin;
    } & ParsedSetSecondaryAdminInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.AddDelegation;
    } & ParsedAddDelegationInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.CooldownDelegation;
    } & ParsedCooldownDelegationInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.UpdateVaultBalance;
    } & ParsedUpdateVaultBalanceInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.InitializeVaultUpdateStateTracker;
    } & ParsedInitializeVaultUpdateStateTrackerInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.CrankVaultUpdateStateTracker;
    } & ParsedCrankVaultUpdateStateTrackerInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.CloseVaultUpdateStateTracker;
    } & ParsedCloseVaultUpdateStateTrackerInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.CreateTokenMetadata;
    } & ParsedCreateTokenMetadataInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.UpdateTokenMetadata;
    } & ParsedUpdateTokenMetadataInstruction<TProgram>)
  | ({
      instructionType: JitoVaultProgramInstruction.Slash;
    } & ParsedSlashInstruction<TProgram>);
