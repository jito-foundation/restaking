name: Publish All Restaking Crates

on:
  workflow_dispatch:
    inputs:
      level:
        description: Version increment level for all crates
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: Dry run (no actual publishing)
        required: true
        default: true
        type: boolean
      create_release:
        description: Create a GitHub release
        required: true
        type: boolean
        default: true

jobs:
  verified_build:
    name: verified_build
    runs-on: big-runner-1
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libudev-dev
      - run: docker pull --platform linux/amd64 solanafoundation/solana-verifiable-build:2.1.11
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install solana-verify from crates.io
        uses: baptiste0928/cargo-install@v3
        with:
          crate: solana-verify
      - run: solana-verify build --library-name jito_restaking_program --base-image solanafoundation/solana-verifiable-build:2.1.11
      - run: solana-verify build --library-name jito_vault_program --base-image solanafoundation/solana-verifiable-build:2.1.11
      - name: Upload jito_restaking_program.so
        uses: actions/upload-artifact@v4
        with:
          name: jito_restaking_program.so
          path: target/deploy/jito_restaking_program.so
      - name: Upload jito_vault_program.so
        uses: actions/upload-artifact@v4
        with:
          name: jito_vault_program.so
          path: target/deploy/jito_vault_program.so

  test_sbf:
    name: cargo test
    runs-on: ubuntu-latest
    needs:
      - verified_build
    steps:
      - uses: actions/checkout@v4
      - uses: aarcangeli/load-dotenv@v1.0.0
        with:
          path: config
          filenames: program.env
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libudev-dev
      - name: Download restaking program
        uses: actions/download-artifact@v4
        with:
          name: jito_restaking_program.so
          path: target/sbf-solana-solana/release/
      - name: Download vault program
        uses: actions/download-artifact@v4
        with:
          name: jito_vault_program.so
          path: target/sbf-solana-solana/release/
      - uses: taiki-e/install-action@nextest
      - run: cargo nextest run --all-features
        env:
          SBF_OUT_DIR: ${{ github.workspace }}/target/sbf-solana-solana/release

  publish:
    name: Publish Crates
    runs-on: ubuntu-latest
    needs: test_sbf
    permissions:
      contents: write
    # env:
      # CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # get the whole history for changelog

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: "restaking-publish-${{ inputs.package_path }}"

      - name: Install Cargo Release
        run: cargo install cargo-release

      - name: Set Git Author
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Extract crate name
        id: extract_name
        run: |
          # Extract just the crate name from the path for use in tags and releases
          CRATE_NAME=$(basename "${{ inputs.package_path }}")
          echo "crate_name=$CRATE_NAME" >> $GITHUB_OUTPUT

      - name: Publish All Crates
        run: |
          CRATES=(
            "account_traits_derive"
            "bytemuck"
            "clients/rust/common"
            "clients/rust/restaking_client"
            "clients/rust/vault_client"
            "core"
            "restaking_sdk"
            "restaking_core"
            "restaking_program"
            "vault_sdk"
            "vault_core"
            "vault_program"
          )
          
          for crate_path in "${CRATES[@]}"; do
            echo "Publishing $crate_path..."
            cd "$GITHUB_WORKSPACE/$crate_path"
            
            # Get versions
            OLD_VERSION=$(grep -m1 'version =' Cargo.toml | cut -d '"' -f2)
            
            if [ "${{ inputs.dry_run }}" == "true" ]; then
              cargo release ${{ inputs.level }} --no-confirm --no-push
            else
              cargo release ${{ inputs.level }} --no-confirm -x
            fi
            
            NEW_VERSION=$(grep -m1 'version =' Cargo.toml | cut -d '"' -f2)
            CRATE_NAME=$(basename "$crate_path")
            
            # Generate changelog for this specific crate
            echo "Creating release for $CRATE_NAME v$NEW_VERSION"
            
            cd "$GITHUB_WORKSPACE"
          done

      - name: Generate changelogs and create releases
        if: github.event.inputs.create_release == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          CRATES=(
            "account_traits_derive"
            "bytemuck"
            "clients/rust/common"
            "clients/rust/restaking_client"
            "clients/rust/vault_client"
            "core"
            "restaking_sdk"
            "restaking_core"
            "restaking_program"
            "vault_sdk"
            "vault_core"
            "vault_program"
          )
          
          for crate_path in "${CRATES[@]}"; do
            CRATE_NAME=$(basename "$crate_path")
            cd "$GITHUB_WORKSPACE/$crate_path"
            NEW_VERSION=$(grep -m1 'version =' Cargo.toml | cut -d '"' -f2)
            
            # Create individual GitHub release for each crate
            gh release create "${CRATE_NAME}-v${NEW_VERSION}" \
              --title "$CRATE_NAME v$NEW_VERSION" \
              --notes "Published $CRATE_NAME version $NEW_VERSION" \
              --latest=false
            
            cd "$GITHUB_WORKSPACE"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}