name: Publish CLI

on:
  workflow_dispatch:
    inputs:
      level:
        description: Version increment level
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: Dry run (no actual publishing)
        required: true
        default: true
        type: boolean

jobs:
  verified_build:
    name: verified_build
    runs-on: big-runner-1
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libudev-dev
      - run: docker pull --platform linux/amd64 solanafoundation/solana-verifiable-build:2.1.11
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install solana-verify from crates.io
        uses: baptiste0928/cargo-install@v3
        with:
          crate: solana-verify
      - run: solana-verify build --library-name jito_restaking_program --base-image solanafoundation/solana-verifiable-build:2.1.11
      - run: solana-verify build --library-name jito_vault_program --base-image solanafoundation/solana-verifiable-build:2.1.11
      - name: Upload jito_restaking_program.so
        uses: actions/upload-artifact@v4
        with:
          name: jito_restaking_program.so
          path: target/deploy/jito_restaking_program.so
      - name: Upload jito_vault_program.so
        uses: actions/upload-artifact@v4
        with:
          name: jito_vault_program.so
          path: target/deploy/jito_vault_program.so

  test_sbf:
    name: cargo test
    runs-on: ubuntu-latest
    needs:
      - verified_build
    steps:
      - uses: actions/checkout@v4
      - uses: aarcangeli/load-dotenv@v1.0.0
        with:
          path: config
          filenames: program.env
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libudev-dev
      - name: Download restaking program
        uses: actions/download-artifact@v4
        with:
          name: jito_restaking_program.so
          path: target/sbf-solana-solana/release/
      - name: Download vault program
        uses: actions/download-artifact@v4
        with:
          name: jito_vault_program.so
          path: target/sbf-solana-solana/release/
      - uses: taiki-e/install-action@nextest
      - run: cargo nextest run --all-features
        env:
          SBF_OUT_DIR: ${{ github.workspace }}/target/sbf-solana-solana/release

  publish_cli:
    name: Publish CLI
    runs-on: ubuntu-latest
    needs: test_sbf
    permissions:
      contents: write
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # get the whole history for changelog

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: "restaking-publish-${{ inputs.package_path }}"

      - name: Install Cargo Release
        run: cargo install cargo-release

      - name: Set Git Author
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Publish CLI Crate
        id: publish
        working-directory: cli
        run: |
          OLD_VERSION=$(grep -m1 'version =' Cargo.toml | cut -d '"' -f2)
          
          if [ "${{ inputs.dry_run }}" == "true" ]; then
            cargo release ${{ inputs.level }} --no-confirm --no-push
          else
            cargo release ${{ inputs.level }} --no-confirm -x
          fi
          
          NEW_VERSION=$(grep -m1 'version =' Cargo.toml | cut -d '"' -f2)
          
          echo "old_version=${OLD_VERSION}" >> $GITHUB_OUTPUT
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "git_tag=v${NEW_VERSION}-cli" >> $GITHUB_OUTPUT

      # We will add it later
      # Optional: Build binaries for different platforms
      # - name: Build CLI binaries
      #   if: inputs.create_binaries == 'true'
      #   run: |
      #     # Build for different targets
      #     cargo build --release --bin your-cli-name
      #     # You could add cross-compilation here

      - name: Create CLI Release
        if: inputs.dry_run != 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.publish.outputs.git_tag }}
          name: "Jito Restaking CLI v${{ steps.publish.outputs.new_version }}"
          body: |
            ## CLI Release v${{ steps.publish.outputs.new_version }}
            
            ### Installation
            ```bash
            cargo install jito-restaking-cli --version ${{ steps.publish.outputs.new_version }}
            ```
          makeLatest: true
